{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example of script to make a violin plot of number of UMI per spot.<br>\n",
    "\n",
    "Input files are downsampled.<br>\n",
    "\n",
    "data files needed to run are available at SCP: https://singlecell.broadinstitute.org/single_cell/study/SCP979/<br>\n",
    "please download:<br>\n",
    "10005CN48_C1_downsamp.tsv <br>\n",
    "10005CN48_D1_downsamp.tsv <br>\n",
    "10005CN48_E1_downsamp.tsv <br>\n",
    "10015CN60_E2_downsamp.tsv <br>\n",
    "10015CN84_C2_downsamp.tsv <br>\n",
    "10015CN84_D2_downsamp.tsv <br>\n",
    "10005CN48_C1_stdata_under_tissue_IDs.txt <br>\n",
    "10005CN48_D1_stdata_under_tissue_IDs.txt <br>\n",
    "10005CN48_E1_stdata_under_tissue_IDs.txt <br>\n",
    "10015CN60_E2_stdata_under_tissue_IDs.txt <br>\n",
    "10015CN84_C2_stdata_under_tissue_IDs.txt <br>\n",
    "10015CN84_D2_stdata_under_tissue_IDs.txt<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import os\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import glob\n",
    "import matplotlib as mpl\n",
    "import matplotlib.patches as mpatches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.text import Text\n",
    "from matplotlib import transforms, lines\n",
    "import matplotlib.transforms as mtransforms\n",
    "from matplotlib.font_manager import FontProperties\n",
    "from seaborn.utils import remove_na\n",
    "\n",
    "from scipy import stats\n",
    "DEFAULT = object()\n",
    "\n",
    "\n",
    "def stat_test(box_data1, box_data2, test):\n",
    "    test_short_name = ''\n",
    "    formatted_output = None\n",
    "    if test == 'Wilcoxon':\n",
    "        u_stat, pval = stats.ranksums(box_data1, box_data2)\n",
    "        test_short_name = 'Wilcox'\n",
    "        formatted_output = (\"Wilcoxon test P_val={:.3e} U_stat={:.3e}\"\n",
    "                           .format(pval, u_stat))\n",
    "        \n",
    "    elif test == 'ttest':\n",
    "        u_stat, pval = stats.ttest_ind(box_data1, box_data2, equal_var=False)\n",
    "        test_short_name = 'T-test'\n",
    "        formatted_output = (\"T-test P_val={:.3e} U_stat={:.3e}\"\n",
    "                           .format(pval, u_stat))\n",
    "    return pval, u_stat,formatted_output, test_short_name\n",
    "\n",
    "\n",
    "def pval_annotation_text(x, pvalue_thresholds):\n",
    "    singleValue = False\n",
    "    if type(x) is np.array:\n",
    "        x1 = x\n",
    "    else:\n",
    "        x1 = np.array([x])\n",
    "        singleValue = True\n",
    "    # Sort the threshold array\n",
    "    pvalue_thresholds = pd.DataFrame(pvalue_thresholds).sort_values(by=0, ascending=False).values\n",
    "    x_annot = pd.Series([\"\" for _ in range(len(x1))])\n",
    "    for i in range(0, len(pvalue_thresholds)):\n",
    "        if (i < len(pvalue_thresholds)-1):\n",
    "            condition = (x1 <= pvalue_thresholds[i][0]) & (pvalue_thresholds[i+1][0] < x1)\n",
    "            x_annot[condition] = pvalue_thresholds[i][1]\n",
    "        else:\n",
    "            condition = x1 < pvalue_thresholds[i][0]\n",
    "            x_annot[condition] = pvalue_thresholds[i][1]\n",
    "\n",
    "    return x_annot if not singleValue else x_annot.iloc[0]\n",
    "\n",
    "\n",
    "def simple_text(pval, pvalue_format, pvalue_thresholds, test_short_name=None):\n",
    "    \"\"\"\n",
    "    Generates simple text for test name and pvalue\n",
    "    :param pval: pvalue\n",
    "    :param pvalue_format: format string for pvalue\n",
    "    :param test_short_name: Short name of test to show\n",
    "    :param pvalue_thresholds: String to display per pvalue range\n",
    "    :return: simple annotation\n",
    "    \"\"\"\n",
    "    # Sort thresholds\n",
    "    thresholds = sorted(pvalue_thresholds, key=lambda x: x[0])\n",
    "\n",
    "    # Test name if passed\n",
    "    text = test_short_name and test_short_name + \" \" or \"\"\n",
    "\n",
    "    for threshold in thresholds:\n",
    "        if pval < threshold[0]:\n",
    "            pval_text = \"p â‰¤ {}\".format(threshold[1])\n",
    "            break\n",
    "    else:\n",
    "        pval_text = \"p = {}\".format(pvalue_format).format(pval)\n",
    "\n",
    "    #return text + pval_text\n",
    "    return pval_text\n",
    "\n",
    "\n",
    "def add_stat_annotation(ax,\n",
    "                        data=None, x=None, y=None, hue=None, order=None, hue_order=None,\n",
    "                        box_pairs=None,\n",
    "                        test='t-test_welch', text_format='star', pvalue_format_string=DEFAULT,\n",
    "                        loc='inside', show_test_name=True, pvalue_thresholds=DEFAULT,\n",
    "                        use_fixed_offset=False, line_offset_to_box=None, line_offset=None,\n",
    "                        line_height=0.02, text_offset=1, stack=True,\n",
    "                        color='0.2', linewidth=1.5, fontsize='medium', verbose=1):\n",
    "    \"\"\"\n",
    "    User should use the same argument for the data, x, y, hue, order, hue_order as the seaborn boxplot function.\n",
    "    line_height is in axes fraction coordinates.\n",
    "    text_offset is in points.\n",
    "    box_pairs can be of either form:\n",
    "    For non-grouped boxplot: [(cat1, cat2), (cat3, cat4)]\n",
    "    For boxplot grouped by hue: [((cat1, hue1), (cat2, hue2)), ((cat3, hue3), (cat4, hue4))]\n",
    "    Default pvalue_format_string is \"{.3e}\".\n",
    "    pvalue_thresholds is a list of lists or tuples. Default is:\n",
    "    For \"star\" text_format:\n",
    "        [[1e-4, \"****\"], [1e-3, \"***\"], [1e-2, \"**\"], [0.05, \"*\"], [1, \"ns\"]]\n",
    "    For \"simple\" text_format :\n",
    "        [[1e-5, \"1e-5\"], [1e-4, \"1e-4\"], [1e-3, \"0.001\"], [1e-2, \"0.01\"]]\n",
    "    \"\"\"\n",
    "\n",
    "    def find_x_position_box(box_plotter, boxName):\n",
    "        \"\"\"\n",
    "        boxName can be either a name \"cat\" or a tuple (\"cat\", \"hue\")\n",
    "        \"\"\"\n",
    "        if box_plotter.plot_hues is None:\n",
    "            cat = boxName\n",
    "            hueOffset = 0\n",
    "        else:\n",
    "            cat = boxName[0]\n",
    "            hue = boxName[1]\n",
    "            hueOffset = box_plotter.hue_offsets[box_plotter.hue_names.index(hue)]\n",
    "\n",
    "        groupPos = box_plotter.group_names.index(cat)\n",
    "        boxPos = groupPos + hueOffset\n",
    "        return boxPos\n",
    "\n",
    "\n",
    "    def get_box_data(box_plotter, boxName):\n",
    "        \"\"\"\n",
    "        boxName can be either a name \"cat\" or a tuple (\"cat\", \"hue\")\n",
    "        Here we really have to duplicate seaborn code, because there is not direct access to the\n",
    "        box_data in the BoxPlotter class.\n",
    "        \"\"\"\n",
    "        if box_plotter.plot_hues is None:\n",
    "            cat = boxName\n",
    "        else:\n",
    "            cat = boxName[0]\n",
    "            hue = boxName[1]\n",
    "\n",
    "        i = box_plotter.group_names.index(cat)\n",
    "        group_data = box_plotter.plot_data[i]\n",
    "\n",
    "        if box_plotter.plot_hues is None:\n",
    "            # Draw a single box or a set of boxes\n",
    "            # with a single level of grouping\n",
    "            box_data = remove_na(group_data)\n",
    "        else:\n",
    "            hue_level = hue\n",
    "            hue_mask = box_plotter.plot_hues[i] == hue_level\n",
    "            box_data = remove_na(group_data[hue_mask])\n",
    "\n",
    "        return box_data\n",
    "\n",
    "    # Set default values if necessary\n",
    "    if pvalue_format_string is DEFAULT:\n",
    "        pvalue_format_string = '{:.3e}'\n",
    "        simple_format_string = '{:.2f}'\n",
    "    else:\n",
    "        simple_format_string = pvalue_format_string\n",
    "\n",
    "    if pvalue_thresholds is DEFAULT:\n",
    "        if text_format == \"star\":\n",
    "            pvalue_thresholds = [[1e-4, \"****\"], [1e-3, \"***\"],\n",
    "                                 [1e-2, \"**\"], [0.05, \"*\"], [1, \"ns\"]]\n",
    "        else:\n",
    "            pvalue_thresholds = [[1e-5, \"1e-5\"], [1e-4, \"1e-4\"],\n",
    "                                 [1e-3, \"0.001\"], [1e-2, \"0.01\"]]\n",
    "    \n",
    "    fig = plt.gcf()\n",
    "\n",
    "    valid_list = ['inside', 'outside']\n",
    "    if loc not in valid_list:\n",
    "        raise ValueError(\"loc value should be one of the following: {}.\".format(', '.join(valid_list)))\n",
    "    valid_list = ['Wilcoxon', 'ttest']\n",
    "    if test not in valid_list:\n",
    "        raise ValueError(\"test value should be one of the following: {}.\".format(', '.join(valid_list)))\n",
    "\n",
    "    if verbose >= 1 and text_format == 'star':\n",
    "        print(\"pvalue annotation legend:\")\n",
    "        pvalue_thresholds = pd.DataFrame(pvalue_thresholds).sort_values(by=0, ascending=False).values\n",
    "        for i in range(0, len(pvalue_thresholds)):\n",
    "            if (i < len(pvalue_thresholds)-1):\n",
    "                print('{}: {:.2e} < p <= {:.2e}'.format(pvalue_thresholds[i][1], pvalue_thresholds[i+1][0], pvalue_thresholds[i][0]))\n",
    "            else:\n",
    "                print('{}: p <= {:.2e}'.format(pvalue_thresholds[i][1], pvalue_thresholds[i][0]))\n",
    "        print()\n",
    "\n",
    "    # Create the same BoxPlotter object as seaborn's boxplot\n",
    "    box_plotter = sns.categorical._BoxPlotter(x, y, hue, data, order, hue_order,\n",
    "                                              orient=None, width=.8, color=None, palette=None, saturation=.75,\n",
    "                                              dodge=True, fliersize=5, linewidth=None)\n",
    "    print(box_plotter.group_names, box_plotter.hue_names)\n",
    "    ylim = ax.get_ylim()\n",
    "    yrange = ylim[1] - ylim[0]\n",
    "\n",
    "    if line_offset is None:\n",
    "        if loc == 'inside':\n",
    "            line_offset = 0.05\n",
    "            if line_offset_to_box is None:\n",
    "                line_offset_to_box = 0.06\n",
    "        elif loc == 'outside':\n",
    "            line_offset = 0.03\n",
    "            line_offset_to_box = line_offset\n",
    "    else:\n",
    "        if loc == 'inside':\n",
    "            if line_offset_to_box is None:\n",
    "                line_offset_to_box = 0.06\n",
    "        elif loc == 'outside':\n",
    "            line_offset_to_box = line_offset\n",
    "    y_offset = line_offset*yrange\n",
    "    y_offset_to_box = line_offset_to_box*yrange\n",
    "\n",
    "    y_stack = []\n",
    "    annList = []\n",
    "    test_result_list = []\n",
    "    for box1, box2 in box_pairs:\n",
    "\n",
    "        valid = None\n",
    "        group_names = box_plotter.group_names\n",
    "        hue_names = box_plotter.hue_names\n",
    "        if box_plotter.plot_hues is None:\n",
    "            cat1 = box1\n",
    "            cat2 = box2\n",
    "            hue1 = None\n",
    "            hue2 = None\n",
    "            label1 = '{}'.format(cat1)\n",
    "            label2 = '{}'.format(cat2)\n",
    "            valid = cat1 in group_names and cat2 in group_names\n",
    "        else:\n",
    "            cat1 = box1[0]\n",
    "            hue1 = box1[1]\n",
    "            cat2 = box2[0]\n",
    "            hue2 = box2[1]\n",
    "            label1 = '{}_{}'.format(cat1, hue1)\n",
    "            label2 = '{}_{}'.format(cat2, hue2)\n",
    "            valid = cat1 in group_names and cat2 in group_names and hue1 in hue_names and hue2 in hue_names\n",
    "\n",
    "        if valid:\n",
    "            # Get position of boxes\n",
    "            x1 = find_x_position_box(box_plotter, box1)\n",
    "            x2 = find_x_position_box(box_plotter, box2)\n",
    "            box_data1 = get_box_data(box_plotter, box1)\n",
    "            box_data2 = get_box_data(box_plotter, box2)\n",
    "            ymax1 = box_data1.max()\n",
    "            ymax2 = box_data2.max()\n",
    "\n",
    "            pval, u_stat,formatted_output, test_short_name = stat_test(box_data1, box_data2, test)\n",
    "            test_result_list.append({'pvalue':pval, 'test_short_name':test_short_name,\n",
    "                                   'formatted_output':formatted_output, 'box1':box1, 'box2':box2})\n",
    "            if verbose >= 1:\n",
    "                print(\"{} v.s. {}: {}\".format(label1, label2, formatted_output))\n",
    "\n",
    "            if text_format == 'full':\n",
    "                text = \"{} p = {}\".format('{}', pvalue_format_string).format(test_short_name, pval)\n",
    "            elif text_format is None:\n",
    "                text = None\n",
    "            elif text_format is 'star':\n",
    "                text = pval_annotation_text(pval, pvalue_thresholds)\n",
    "            elif text_format is 'simple':\n",
    "                test_short_name = show_test_name and test_short_name or \"\"\n",
    "                text = simple_text(pval, simple_format_string, pvalue_thresholds,\n",
    "                                   test_short_name)\n",
    "\n",
    "            if loc == 'inside':\n",
    "                yref = max(ymax1, ymax2)\n",
    "            elif loc == 'outside':\n",
    "                yref = ylim[1]\n",
    "\n",
    "            if stack:\n",
    "                if len(y_stack) > 0:\n",
    "                    yref2 = max(yref, max(y_stack))\n",
    "                else:\n",
    "                    yref2 = yref\n",
    "            else:\n",
    "                yref2 = yref\n",
    "\n",
    "            if len(y_stack) == 0:\n",
    "                y = yref2 + y_offset_to_box\n",
    "            else:\n",
    "                y = yref2 + y_offset\n",
    "            h = line_height*yrange\n",
    "            lineX, lineY = [x1, x1, x2, x2], [y, y + h, y + h, y]\n",
    "            if loc == 'inside':\n",
    "                ax.plot(lineX, lineY, lw=linewidth, c=color)\n",
    "            elif loc == 'outside':\n",
    "                line = lines.Line2D(lineX, lineY, lw=linewidth, c=color, transform=ax.transData)\n",
    "                line.set_clip_on(False)\n",
    "                ax.add_line(line)\n",
    "\n",
    "            if text is not None:\n",
    "                ann = ax.annotate(text, xy=(np.mean([x1, x2]), y + h),\n",
    "                                  xytext=(0, text_offset), textcoords='offset points',\n",
    "                                  xycoords='data', ha='center', va='bottom', fontsize=fontsize,\n",
    "                                  clip_on=False, annotation_clip=False)\n",
    "                annList.append(ann)\n",
    "\n",
    "            ax.set_ylim((ylim[0], 1.1*(y + h)))\n",
    "\n",
    "            if text is not None:\n",
    "                plt.draw()\n",
    "                y_top_annot = None\n",
    "                got_mpl_error = False\n",
    "                if not use_fixed_offset:\n",
    "                    try:\n",
    "                        bbox = ann.get_window_extent()\n",
    "                        bbox_data = bbox.transformed(ax.transData.inverted())\n",
    "                        y_top_annot = bbox_data.ymax\n",
    "                    except RuntimeError:\n",
    "                        got_mpl_error = True\n",
    "\n",
    "                if use_fixed_offset or got_mpl_error:\n",
    "                    if verbose >= 1:\n",
    "                        print(\"Warning: cannot get the text bounding box. Falling back to a fixed y offset. Layout may be not optimal.\")\n",
    "                    # We will apply a fixed offset in points, based on the font size of the annotation.\n",
    "                    fontsize_points = FontProperties(size='medium').get_size_in_points()\n",
    "                    offsetTrans = mtransforms.offset_copy(ax.transData, fig=fig,\n",
    "                                                          x=0, y=1.0*fontsize_points + text_offset, units='points')\n",
    "                    yTopDisplay = offsetTrans.transform((0, y + h))\n",
    "                    y_top_annot = ax.transData.inverted().transform(yTopDisplay)[1]\n",
    "            else:\n",
    "                y_top_annot = y + h\n",
    "\n",
    "            y_stack.append(y_top_annot)\n",
    "        else:\n",
    "            raise ValueError(\"box_pairs contains an unvalid box pair.\")\n",
    "            pass\n",
    "\n",
    "    y_stack_max = max(y_stack)\n",
    "    if loc == 'inside':\n",
    "        ax.set_ylim((ylim[0], 1.03*y_stack_max))\n",
    "    elif loc == 'outside':\n",
    "        ax.set_ylim((ylim[0], ylim[1]))\n",
    "\n",
    "    return ax, test_result_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def condition(row):\n",
    "    \"\"\" Takes row in pandas df as input and returns type of condition\n",
    "    \"\"\"\n",
    "    # The samples are run in triplicate based on condition\n",
    "    condition = ['sm-omics', 'ST']\n",
    "\n",
    "    if row['index'] in ['10015CN84_D2', '10015CN84_C2', '10015CN60_E2']:\n",
    "        return condition[0]\n",
    "        \n",
    "    elif row['index'] in ['10005CN48_C1', '10005CN48_D1', '10005CN48_E1']:\n",
    "        return condition[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a sample-condition dictionary\n",
    "sam_cond = {'ST': ['10005CN48_C1', '10005CN48_D1', '10005CN48_E1'],\n",
    "           'sm-omics':['10015CN84_D2', '10015CN84_C2', '10015CN60_E2']}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "'Reads in tsv counts files'\n",
    "path = '../../smomics_data/'\n",
    "\n",
    "samples_list = ['10005CN48_C1', '10005CN48_D1', '10005CN48_E1', '10015CN84_D2', '10015CN84_C2', '10015CN60_E2']\n",
    "\n",
    "\n",
    "files_dict = {}\n",
    "    \n",
    "for filename in samples_list:\n",
    "    \n",
    "    file = pd.read_csv(os.path.join(path, filename + '_downsamp_stdata.tsv'), sep = '\\t', index_col=0)\n",
    "    files_dict[filename] = file.T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10005CN48_C1\n",
      "279\n",
      "10005CN48_D1\n",
      "271\n",
      "10005CN48_E1\n",
      "203\n",
      "10015CN84_D2\n",
      "235\n",
      "10015CN84_C2\n",
      "267\n",
      "10015CN60_E2\n",
      "276\n"
     ]
    }
   ],
   "source": [
    "'Splits counts file to inside vs outside tissue'\n",
    "genes_under_tissue_dict = {}\n",
    "    \n",
    "for filename in samples_list:\n",
    "    \n",
    "    file = pd.read_csv(os.path.join(path, filename + '_stdata_under_tissue_IDs.txt'), sep = '\\t', index_col=0)\n",
    "    \n",
    "    spot_coord = list()\n",
    "    \n",
    "    # 10005CN48_E1 samples have spot coordinates in float...\n",
    "    if filename.startswith('10005CN48_E1'):\n",
    "        for spots in list(file):\n",
    "            spot_tmp = [ float(elem) for elem in spots.split('_') ]\n",
    "            spot_tmp2 = [ round(elem, 0) for elem in spot_tmp ]\n",
    "            spot_tmp3 = [ int(elem) for elem in spot_tmp2 ]\n",
    "\n",
    "            new_spot_coord = str(spot_tmp3[0]) + 'x' + str(spot_tmp3[1])\n",
    "            spot_coord.append(new_spot_coord)\n",
    "    else:\n",
    "        for spots in list(file):\n",
    "            spots_tmp = spots.split('_')\n",
    "            new_spot_coord = str(spots_tmp[0]) + 'x' + str(spots_tmp[1])   \n",
    "            spot_coord.append(new_spot_coord)\n",
    "\n",
    "    genes_under_tissue_dict[filename] = spot_coord\n",
    "\n",
    "files_underoutside_tissue_dict = {}\n",
    "\n",
    "for k, v in files_dict.items():\n",
    "    #print(genes_under_tissue_dict[k])\n",
    "    v_under_tissue = v[genes_under_tissue_dict[k]]\n",
    "\n",
    "    # Spots outside of tissue\n",
    "    spots_outside_tissue = [x for x in list(v) if x not in list(v_under_tissue)]\n",
    "    v_outside_tissue = v[spots_outside_tissue] \n",
    "    print(k)\n",
    "    print(len(v_under_tissue.columns))\n",
    "\n",
    "    files_underoutside_tissue_dict[k] = [v_under_tissue, v_outside_tissue]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10005CN48_C1\n",
      "3887\n",
      "10005CN48_D1\n",
      "3524\n",
      "10005CN48_E1\n",
      "2759\n",
      "10015CN84_D2\n",
      "9338\n",
      "10015CN84_C2\n",
      "8699\n",
      "10015CN60_E2\n",
      "9769\n"
     ]
    }
   ],
   "source": [
    "'Collects average gene and UMI counts inside vs. outside tissue in a dataframe'\n",
    "# Filter on sequencing depth\n",
    "seq_depth = {'10015CN84_D2':[23113376, 23],\n",
    "            '10015CN60_E2':[33876251, 33],\n",
    "            '10015CN84_C2':[28174220, 28],\n",
    "            '10005CN48_C1':[71022006, 71],\n",
    "            '10005CN48_D1':[75643539, 75],\n",
    "            '10005CN48_E1': [58631758, 58]}\n",
    "\n",
    "gene_dict = {}\n",
    "umi_dict = {}\n",
    "total_counts_dict = {}\n",
    "total_genes_dict = {}\n",
    "for key, value in files_underoutside_tissue_dict.items():\n",
    "    \n",
    "    for i, val in enumerate(value): # [inside/outside] of tissue  \n",
    "        #print(len(val.index))\n",
    "        # Sum the counts for each gene\n",
    "        val['tot count'] = val.sum(axis=1)\n",
    "\n",
    "        # # Remove genes (rows) where the total sum is less than xx\n",
    "        #print(len(val.index))\n",
    "        value_red = val[val['tot count'] > seq_depth[key][1]]\n",
    "        \n",
    "        # Remove tot count column\n",
    "        value_red.drop(['tot count'], axis = 1, inplace=True)\n",
    "        total_counts = sum(value_red.sum(axis = 1))\n",
    "        \n",
    "        # Count non-zero values per spot, and take mean value\n",
    "        genes_per_spot = value_red.astype(bool).sum(axis = 0).mean()\n",
    "        total_genes = value_red.astype(bool)[value_red.astype(bool).any(axis=1)].count(axis = 0)[0]\n",
    "        umis_per_spot = value_red.sum(axis = 0).mean()\n",
    "        #print(len(value_red.astype(bool)[value_red.astype(bool).any(axis=1)].index))\n",
    "        \n",
    "        if i == 0: # inside tissue\n",
    "            gene_dict[key] = [genes_per_spot]\n",
    "            umi_dict[key] = [umis_per_spot]\n",
    "            total_counts_dict[key] = [total_counts]\n",
    "            total_genes_dict[key] = [total_genes]\n",
    "            print(key)\n",
    "            print(len(value_red.index))\n",
    "        elif i == 1: # outside tissue\n",
    "            gene_dict[key].append(genes_per_spot)\n",
    "            umi_dict[key].append(umis_per_spot)\n",
    "            total_counts_dict[key].append(total_counts)\n",
    "            total_genes_dict[key].append(total_genes)\n",
    "\n",
    "# Make dataframe out of dict\n",
    "df = pd.DataFrame.from_dict(gene_dict, orient='index', columns=['Genes inside', 'Genes outside']).reset_index()\n",
    "df['Condition'] = df.apply(lambda row: condition(row), axis=1)\n",
    "df_umi = pd.DataFrame.from_dict(umi_dict, orient='index', columns=['UMIs inside', 'UMIs outside']).reset_index()\n",
    "df_umi['Condition'] = df.apply(lambda row: condition(row), axis=1)\n",
    "df_umi_total = pd.DataFrame.from_dict(total_counts_dict, orient='index', columns=['UMIs inside', 'UMIs outside']).reset_index()\n",
    "df_umi_total['Condition'] = df.apply(lambda row: condition(row), axis=1)\n",
    "df_genes_total = pd.DataFrame.from_dict(total_genes_dict, orient='index', columns=['Genes inside', 'Genes outside']).reset_index()\n",
    "df_genes_total['Condition'] = df.apply(lambda row: condition(row), axis=1)\n",
    "\n",
    "# Prepare for plotting\n",
    "dfplot = pd.melt(df, id_vars=['index', 'Condition'], value_vars = ['Genes inside', 'Genes outside'])\n",
    "dfplot_umi = pd.melt(df_umi, id_vars=['index', 'Condition'], value_vars = ['UMIs inside', 'UMIs outside'])\n",
    "df_umi_total = pd.melt(df_umi_total, id_vars=['index', 'Condition'], value_vars = ['UMIs inside', 'UMIs outside'])\n",
    "df_genes_total = pd.melt(df_genes_total, id_vars=['index', 'Condition'], value_vars = ['Genes inside', 'Genes outside'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pvalue annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "['Genes inside', 'Genes outside'] ['ST', 'sm-omics']\n",
      "Genes inside_sm-omics v.s. Genes inside_ST: T-test P_val=1.310e-02 U_stat=6.619e+00\n",
      "Genes outside_sm-omics v.s. Genes outside_ST: T-test P_val=4.221e-01 U_stat=9.273e-01\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'Plots violin plots inside vs. outside tissue: Genes'\n",
    "fig = plt.figure(figsize=(5, 5)) \n",
    "\n",
    "x='variable'\n",
    "y='value'\n",
    "hue = 'Condition'\n",
    "data=dfplot\n",
    "\n",
    "ax = sns.violinplot(x=x, y=y, data=data, hue=hue, hue_order = [ 'sm-omics','ST',], order = ['Genes inside', 'Genes outside'], palette = [ 'cadetblue','lightcoral',], cut=0)\n",
    "\n",
    "# change background color and figure borders\n",
    "back_c = 'white'\n",
    "ax.set_facecolor(back_c)\n",
    "ax.grid(False)\n",
    "\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['bottom'].set_color('k')\n",
    "ax.spines['left'].set_color('k')\n",
    "\n",
    "# X and y label size\n",
    "ax.set_xlabel(\"\")\n",
    "ax.set_ylabel(\"Genes per spot (mean)\", fontsize=15)\n",
    "ax.set_ylim([0,5000])\n",
    "\n",
    "# x and y ticks\n",
    "ax.tick_params(axis='y', labelsize=15)\n",
    "ax.tick_params(axis='x', labelsize=15)\n",
    "\n",
    "# Calculate Wilcoxons \n",
    "boxPairList = [(('Genes inside','sm-omics'), ('Genes inside','ST')),\n",
    "               (('Genes outside','sm-omics'), ('Genes outside','ST'))]\n",
    "\n",
    "add_stat_annotation(ax, data=data, x=x, y=y, hue=hue,\n",
    "                    box_pairs=boxPairList,\n",
    "                    test='ttest', text_format='star', loc='outside', verbose=2, fontsize=15)\n",
    "\n",
    "# Add patterns to distinuigh boxes\n",
    "# hatch= ['////']\n",
    "# for i, thisviolin in enumerate(ax.get_children()):\n",
    "#     if isinstance(thisviolin, mpl.collections.PolyCollection):\n",
    "#         if i in [2, 6]:\n",
    "#             thisviolin.set_hatch(hatch =hatch[0])\n",
    "#             thisviolin.set_edgecolor('k')\n",
    "            \n",
    "# Legend\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "labels2 = [ 'ST','sm-omics']\n",
    "handles2 = handles[0:2]\n",
    "\n",
    "inside_patch = mpatches.Patch( facecolor='lightcoral', label=labels2[0], edgecolor='k')\n",
    "outside_patch= mpatches.Patch( facecolor='cadetblue',  label=labels2[1], edgecolor='k')\n",
    "ax.legend(handles = [inside_patch, outside_patch],loc='upper center', bbox_to_anchor=(0.5, -0.1),\n",
    "          fancybox=True, shadow=True, ncol=2, fontsize=12)\n",
    "\n",
    "\n",
    "fig.set_size_inches(20, 10)\n",
    "plt.savefig(\"../../figures/SM_ST_Genes.pdf\", transparent=True, bbox_inches = 'tight',\n",
    "   pad_inches = 0, dpi=1200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ST</th>\n",
       "      <th>Genes inside</th>\n",
       "      <td>1485.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Genes outside</th>\n",
       "      <td>681.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">sm-omics</th>\n",
       "      <th>Genes inside</th>\n",
       "      <td>3748.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Genes outside</th>\n",
       "      <td>812.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          value\n",
       "Condition variable             \n",
       "ST        Genes inside   1485.0\n",
       "          Genes outside   681.0\n",
       "sm-omics  Genes inside   3748.0\n",
       "          Genes outside   812.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby(['Condition', 'variable']).mean().round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>1621.021505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>1560.756458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>1273.901478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>3638.310638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>3249.228464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>4357.760870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>659.671703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>803.080163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>580.069652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>794.437824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>604.024658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>1038.309166</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index Condition       variable        value\n",
       "0   10005CN48_C1        ST   Genes inside  1621.021505\n",
       "1   10005CN48_D1        ST   Genes inside  1560.756458\n",
       "2   10005CN48_E1        ST   Genes inside  1273.901478\n",
       "3   10015CN84_D2  sm-omics   Genes inside  3638.310638\n",
       "4   10015CN84_C2  sm-omics   Genes inside  3249.228464\n",
       "5   10015CN60_E2  sm-omics   Genes inside  4357.760870\n",
       "6   10005CN48_C1        ST  Genes outside   659.671703\n",
       "7   10005CN48_D1        ST  Genes outside   803.080163\n",
       "8   10005CN48_E1        ST  Genes outside   580.069652\n",
       "9   10015CN84_D2  sm-omics  Genes outside   794.437824\n",
       "10  10015CN84_C2  sm-omics  Genes outside   604.024658\n",
       "11  10015CN60_E2  sm-omics  Genes outside  1038.309166"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = list(data[(data['Condition'] == 'ST') & (data['variable'] == 'Genes inside')]['value'])\n",
    "mean = np.mean(arr)\n",
    "sd = np.std(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "within 2 stdevs:  [1621.021505376344, 1560.7564575645756, 1273.9014778325122]\n",
      "within 2 stdevs:  [1621.021505376344, 1560.7564575645756, 1273.9014778325122]\n"
     ]
    }
   ],
   "source": [
    "final_list = [x for x in arr if (x > mean - 2 * sd)]\n",
    "print(\"within 2 stdevs: \", final_list)\n",
    "final_list = [x for x in final_list if (x < mean + 2 * sd)]\n",
    "print(\"within 2 stdevs: \", final_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pvalue annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "['UMIs inside', 'UMIs outside'] ['ST', 'sm-omics']\n",
      "UMIs inside_sm-omics v.s. UMIs inside_ST: T-test P_val=2.110e-02 U_stat=6.001e+00\n",
      "UMIs outside_sm-omics v.s. UMIs outside_ST: T-test P_val=2.559e-01 U_stat=1.458e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'Plots violin plots inside vs. outside tissue: Genes'\n",
    "fig = plt.figure(figsize=(5, 5)) \n",
    "\n",
    "x='variable'\n",
    "y='value'\n",
    "hue = 'Condition'\n",
    "data=dfplot_umi\n",
    "\n",
    "ax = sns.violinplot(x=x, y=y, data=data, hue=hue, hue_order = [ 'sm-omics','ST',], order = ['UMIs inside', 'UMIs outside'], palette = [ 'cadetblue','lightcoral',], cut=0)\n",
    "\n",
    "# change background color and figure borders\n",
    "back_c = 'white'\n",
    "ax.set_facecolor(back_c)\n",
    "ax.grid(False)\n",
    "\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['bottom'].set_color('k')\n",
    "ax.spines['left'].set_color('k')\n",
    "\n",
    "# X and y label size\n",
    "ax.set_xlabel(\"\")\n",
    "ax.set_ylabel(\"UMIs per spot (mean)\", fontsize=15)\n",
    "ax.set_ylim([0,15000])\n",
    "\n",
    "# x and y ticks\n",
    "ax.tick_params(axis='y', labelsize=15)\n",
    "ax.tick_params(axis='x', labelsize=15)\n",
    "\n",
    "# Calculate Wilcoxons \n",
    "boxPairList = [(('UMIs inside','sm-omics'), ('UMIs inside','ST')),\n",
    "               (('UMIs outside','sm-omics'), ('UMIs outside','ST'))]\n",
    "\n",
    "add_stat_annotation(ax, data=data, x=x, y=y, hue=hue,\n",
    "                    box_pairs=boxPairList,\n",
    "                    test='ttest', text_format='star', loc='outside', verbose=2, fontsize=15)\n",
    "\n",
    "# Add patterns to distinuigh boxes\n",
    "hatch= ['////']\n",
    "# for i, thisviolin in enumerate(ax.get_children()):\n",
    "#     if isinstance(thisviolin, mpl.collections.PolyCollection):\n",
    "#         if i in [2, 6]:\n",
    "#             thisviolin.set_hatch(hatch =hatch[0])\n",
    "#             thisviolin.set_edgecolor('k')\n",
    "            \n",
    "# Legend\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "labels2 = [ 'ST','sm-omics']\n",
    "handles2 = handles[0:2]\n",
    "\n",
    "inside_patch = mpatches.Patch( facecolor='lightcoral', label=labels2[0], edgecolor='k')\n",
    "outside_patch= mpatches.Patch( facecolor='cadetblue',  label=labels2[1], edgecolor='k')\n",
    "ax.legend(handles = [inside_patch, outside_patch],loc='upper center', bbox_to_anchor=(0.5, -0.1),\n",
    "          fancybox=True, shadow=True, ncol=2, fontsize=12)\n",
    "\n",
    "\n",
    "fig.set_size_inches(20, 10)\n",
    "plt.savefig(\"../../figures/SM_ST_UMIs.pdf\", transparent=True, bbox_inches = 'tight',\n",
    "   pad_inches = 0, dpi=1200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ST</th>\n",
       "      <th>UMIs inside</th>\n",
       "      <td>5342.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UMIs outside</th>\n",
       "      <td>1740.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">sm-omics</th>\n",
       "      <th>UMIs inside</th>\n",
       "      <td>12934.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UMIs outside</th>\n",
       "      <td>1734.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          value\n",
       "Condition variable             \n",
       "ST        UMIs inside    5342.0\n",
       "          UMIs outside   1740.0\n",
       "sm-omics  UMIs inside   12934.0\n",
       "          UMIs outside   1734.0"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby(['Condition', 'variable']).mean().round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>5943.075269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>5534.398524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>4547.940887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>13038.625532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>12078.756554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>13683.329710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1685.846154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>2064.186141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1471.125622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1751.540155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1320.779292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>2129.254446</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index Condition      variable         value\n",
       "0   10005CN48_C1        ST   UMIs inside   5943.075269\n",
       "1   10005CN48_D1        ST   UMIs inside   5534.398524\n",
       "2   10005CN48_E1        ST   UMIs inside   4547.940887\n",
       "3   10015CN84_D2  sm-omics   UMIs inside  13038.625532\n",
       "4   10015CN84_C2  sm-omics   UMIs inside  12078.756554\n",
       "5   10015CN60_E2  sm-omics   UMIs inside  13683.329710\n",
       "6   10005CN48_C1        ST  UMIs outside   1685.846154\n",
       "7   10005CN48_D1        ST  UMIs outside   2064.186141\n",
       "8   10005CN48_E1        ST  UMIs outside   1471.125622\n",
       "9   10015CN84_D2  sm-omics  UMIs outside   1751.540155\n",
       "10  10015CN84_C2  sm-omics  UMIs outside   1320.779292\n",
       "11  10015CN60_E2  sm-omics  UMIs outside   2129.254446"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "within 2 stdevs:  []\n",
      "within 2 stdevs:  []\n"
     ]
    }
   ],
   "source": [
    "arr = list(data[(data['Condition'] == 'sm-omics') & (data['variable'] == 'Genes inside')]['value'])\n",
    "mean = np.mean(arr)\n",
    "sd = np.std(arr)\n",
    "\n",
    "final_list = [x for x in arr if (x > mean - 2 * sd)]\n",
    "print(\"within 2 stdevs: \", final_list)\n",
    "final_list = [x for x in final_list if (x < mean + 2 * sd)]\n",
    "print(\"within 2 stdevs: \", final_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "emb_genes = [27893,27256,26693,27379,25582]\n",
    "emb_umis = [3978914,3462300,2911180,2975887,3274052,3412990]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.9223680540429164"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*np.std(emb_genes)/np.mean(emb_genes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.592887360335363"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*np.std(emb_umis)/np.mean(emb_umis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "stahl_umis = [37400,45400,17900,38000,14200]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40.058207973732245"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*np.std(stahl_umis)/np.mean(stahl_umis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condition</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ST</th>\n",
       "      <td>8.144497e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sm-omics</th>\n",
       "      <td>2.931153e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  value\n",
       "Condition              \n",
       "ST         8.144497e+05\n",
       "sm-omics   2.931153e+06"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_umi_total[df_umi_total['variable'] == \"UMIs inside\"].groupby('Condition').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pvalue annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "['ST', 'sm-omics'] None\n",
      "sm-omics v.s. ST: T-test P_val=2.771e-02 U_stat=4.725e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot total UMI counts per condition\n",
    "fig = plt.figure(figsize=(5, 5)) \n",
    "\n",
    "x='Condition'\n",
    "y='value'\n",
    "df_umi_total_inside = df_umi_total[df_umi_total['variable'] == \"UMIs inside\"]\n",
    "data=df_umi_total_inside\n",
    "\n",
    "ax = sns.violinplot(x=x, y=y, data=data, palette = ['cadetblue', 'lightcoral'], order = ['sm-omics', 'ST'])\n",
    "\n",
    "# change background color\n",
    "back_c = 'white'\n",
    "ax.set_facecolor(back_c)\n",
    "ax.grid(False)\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['bottom'].set_color('k')\n",
    "ax.spines['left'].set_color('k')\n",
    "\n",
    "# X and y label size\n",
    "ax.set_xlabel(\"\")\n",
    "ax.set_ylabel(\"Total number of \\nunique moelcules (millions)\", fontsize=15)\n",
    "ax.set_ylim([0,5000000])\n",
    "\n",
    "# x and y ticks\n",
    "ax.tick_params(axis='y', labelsize=15)\n",
    "ax.tick_params(axis='x', labelsize=15)\n",
    "ax.set_xticklabels(['sm-omics', 'ST'])\n",
    "\n",
    "# Separator on y axis\n",
    "ax.get_yaxis().set_major_formatter(\n",
    "    mpl.ticker.FuncFormatter(lambda x, p: format(float(x/1000000), ',')))\n",
    "\n",
    "# Calculate T-test \n",
    "boxPairList = [(('sm-omics'), ('ST'))]\n",
    "\n",
    "add_stat_annotation(ax, data=data, x=x, y=y,\n",
    "                    box_pairs=boxPairList,\n",
    "                    test='ttest', text_format='star', loc='outside', verbose=2, fontsize=15)\n",
    "\n",
    "fig.set_size_inches(20, 10)\n",
    "plt.savefig(\"../../figures/SM_ST_Total_UMIs.pdf\", transparent=True, bbox_inches = 'tight',\n",
    "   pad_inches = 0, dpi=1200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pvalue annotation legend:\n",
      "ns: 5.00e-02 < p <= 1.00e+00\n",
      "*: 1.00e-02 < p <= 5.00e-02\n",
      "**: 1.00e-03 < p <= 1.00e-02\n",
      "***: 1.00e-04 < p <= 1.00e-03\n",
      "****: p <= 1.00e-04\n",
      "\n",
      "['ST', 'sm-omics'] None\n",
      "sm-omics v.s. ST: T-test P_val=2.128e-04 U_stat=1.292e+01\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot total UMI counts per condition\n",
    "fig = plt.figure(figsize=(5, 5)) \n",
    "\n",
    "x='Condition'\n",
    "y='value'\n",
    "df_genes_total_inside = df_genes_total[df_genes_total['variable'] == \"Genes inside\"]\n",
    "data=df_genes_total_inside\n",
    "\n",
    "ax = sns.violinplot(x=x, y=y, data=data, palette = ['cadetblue', 'lightcoral'], order = ['sm-omics', 'ST'])\n",
    "\n",
    "# change background color\n",
    "back_c = 'white'\n",
    "ax.set_facecolor(back_c)\n",
    "ax.grid(False)\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['bottom'].set_color('k')\n",
    "ax.spines['left'].set_color('k')\n",
    "\n",
    "# X and y label size\n",
    "ax.set_xlabel(\"\")\n",
    "ax.set_ylabel(\"Total number of genes\", fontsize=15)\n",
    "ax.set_ylim([0,11000])\n",
    "\n",
    "# x and y ticks\n",
    "ax.tick_params(axis='y', labelsize=15)\n",
    "ax.tick_params(axis='x', labelsize=15)\n",
    "ax.set_xticklabels(['sm-omics', 'ST'])\n",
    "\n",
    "# # Separator on y axis\n",
    "# ax.get_yaxis().set_major_formatter(\n",
    "#     mpl.ticker.FuncFormatter(lambda x, p: format(float(x/1000000), ',')))\n",
    "\n",
    "# Calculate T-test \n",
    "boxPairList = [(('sm-omics'), ('ST'))]\n",
    "\n",
    "add_stat_annotation(ax, data=data, x=x, y=y,\n",
    "                    box_pairs=boxPairList,\n",
    "                    test='ttest', text_format='star', loc='outside', verbose=2, fontsize=15)\n",
    "\n",
    "fig.set_size_inches(20, 10)\n",
    "plt.savefig(\"../../figures/SM_ST_Total_Genes.pdf\", transparent=True, bbox_inches = 'tight',\n",
    "   pad_inches = 0, dpi=1200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>3887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>3524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>2759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>9338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>8699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes inside</td>\n",
       "      <td>9769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>3090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>3603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>3344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>6483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>4694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>Genes outside</td>\n",
       "      <td>6308</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index Condition       variable  value\n",
       "0   10005CN48_C1        ST   Genes inside   3887\n",
       "1   10005CN48_D1        ST   Genes inside   3524\n",
       "2   10005CN48_E1        ST   Genes inside   2759\n",
       "3   10015CN84_D2  sm-omics   Genes inside   9338\n",
       "4   10015CN84_C2  sm-omics   Genes inside   8699\n",
       "5   10015CN60_E2  sm-omics   Genes inside   9769\n",
       "6   10005CN48_C1        ST  Genes outside   3090\n",
       "7   10005CN48_D1        ST  Genes outside   3603\n",
       "8   10005CN48_E1        ST  Genes outside   3344\n",
       "9   10015CN84_D2  sm-omics  Genes outside   6483\n",
       "10  10015CN84_C2  sm-omics  Genes outside   4694\n",
       "11  10015CN60_E2  sm-omics  Genes outside   6308"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_genes_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Condition</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>987771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>927837.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>527741.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>2567065.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>2449794.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs inside</td>\n",
       "      <td>3776599.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10005CN48_C1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>709066.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10005CN48_D1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>930829.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10005CN48_E1</td>\n",
       "      <td>ST</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>686843.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10015CN84_D2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1138217.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10015CN84_C2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>736091.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10015CN60_E2</td>\n",
       "      <td>sm-omics</td>\n",
       "      <td>UMIs outside</td>\n",
       "      <td>1556485.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index Condition      variable      value\n",
       "0   10005CN48_C1        ST   UMIs inside   987771.0\n",
       "1   10005CN48_D1        ST   UMIs inside   927837.0\n",
       "2   10005CN48_E1        ST   UMIs inside   527741.0\n",
       "3   10015CN84_D2  sm-omics   UMIs inside  2567065.0\n",
       "4   10015CN84_C2  sm-omics   UMIs inside  2449794.0\n",
       "5   10015CN60_E2  sm-omics   UMIs inside  3776599.0\n",
       "6   10005CN48_C1        ST  UMIs outside   709066.0\n",
       "7   10005CN48_D1        ST  UMIs outside   930829.0\n",
       "8   10005CN48_E1        ST  UMIs outside   686843.0\n",
       "9   10015CN84_D2  sm-omics  UMIs outside  1138217.0\n",
       "10  10015CN84_C2  sm-omics  UMIs outside   736091.0\n",
       "11  10015CN60_E2  sm-omics  UMIs outside  1556485.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_umi_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
